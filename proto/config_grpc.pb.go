// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	ConfigUpdate(ctx context.Context, in *ConfigUpdateParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WhiteListAdd(ctx context.Context, in *WhiteListParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WhiteListDelete(ctx context.Context, in *WhiteListDeleteParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WhiteList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WhiteListResponse, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) ConfigUpdate(ctx context.Context, in *ConfigUpdateParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mika.Config/ConfigUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) WhiteListAdd(ctx context.Context, in *WhiteListParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mika.Config/WhiteListAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) WhiteListDelete(ctx context.Context, in *WhiteListDeleteParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mika.Config/WhiteListDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) WhiteList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WhiteListResponse, error) {
	out := new(WhiteListResponse)
	err := c.cc.Invoke(ctx, "/mika.Config/WhiteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations must embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	ConfigUpdate(context.Context, *ConfigUpdateParams) (*emptypb.Empty, error)
	WhiteListAdd(context.Context, *WhiteListParams) (*emptypb.Empty, error)
	WhiteListDelete(context.Context, *WhiteListDeleteParams) (*emptypb.Empty, error)
	WhiteList(context.Context, *emptypb.Empty) (*WhiteListResponse, error)
	mustEmbedUnimplementedConfigServer()
}

// UnimplementedConfigServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) ConfigUpdate(context.Context, *ConfigUpdateParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdate not implemented")
}
func (UnimplementedConfigServer) WhiteListAdd(context.Context, *WhiteListParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteListAdd not implemented")
}
func (UnimplementedConfigServer) WhiteListDelete(context.Context, *WhiteListDeleteParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteListDelete not implemented")
}
func (UnimplementedConfigServer) WhiteList(context.Context, *emptypb.Empty) (*WhiteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhiteList not implemented")
}
func (UnimplementedConfigServer) mustEmbedUnimplementedConfigServer() {}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_ConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).ConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mika.Config/ConfigUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).ConfigUpdate(ctx, req.(*ConfigUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_WhiteListAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).WhiteListAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mika.Config/WhiteListAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).WhiteListAdd(ctx, req.(*WhiteListParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_WhiteListDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhiteListDeleteParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).WhiteListDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mika.Config/WhiteListDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).WhiteListDelete(ctx, req.(*WhiteListDeleteParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_WhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).WhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mika.Config/WhiteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).WhiteList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mika.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigUpdate",
			Handler:    _Config_ConfigUpdate_Handler,
		},
		{
			MethodName: "WhiteListAdd",
			Handler:    _Config_WhiteListAdd_Handler,
		},
		{
			MethodName: "WhiteListDelete",
			Handler:    _Config_WhiteListDelete_Handler,
		},
		{
			MethodName: "WhiteList",
			Handler:    _Config_WhiteList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/config.proto",
}
