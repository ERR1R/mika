// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TorrentsClient is the client API for Torrents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentsClient interface {
	GetTorrent(ctx context.Context, in *TorrentParams, opts ...grpc.CallOption) (*Torrent, error)
	TorrentAdd(ctx context.Context, in *TorrentAddParams, opts ...grpc.CallOption) (*Torrent, error)
	TorrentDelete(ctx context.Context, in *InfoHashParam, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TorrentUpdate(ctx context.Context, in *TorrentUpdateParams, opts ...grpc.CallOption) (*Torrent, error)
}

type torrentsClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentsClient(cc grpc.ClientConnInterface) TorrentsClient {
	return &torrentsClient{cc}
}

func (c *torrentsClient) GetTorrent(ctx context.Context, in *TorrentParams, opts ...grpc.CallOption) (*Torrent, error) {
	out := new(Torrent)
	err := c.cc.Invoke(ctx, "/mika.Torrents/GetTorrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentsClient) TorrentAdd(ctx context.Context, in *TorrentAddParams, opts ...grpc.CallOption) (*Torrent, error) {
	out := new(Torrent)
	err := c.cc.Invoke(ctx, "/mika.Torrents/TorrentAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentsClient) TorrentDelete(ctx context.Context, in *InfoHashParam, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mika.Torrents/TorrentDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentsClient) TorrentUpdate(ctx context.Context, in *TorrentUpdateParams, opts ...grpc.CallOption) (*Torrent, error) {
	out := new(Torrent)
	err := c.cc.Invoke(ctx, "/mika.Torrents/TorrentUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentsServer is the server API for Torrents service.
// All implementations must embed UnimplementedTorrentsServer
// for forward compatibility
type TorrentsServer interface {
	GetTorrent(context.Context, *TorrentParams) (*Torrent, error)
	TorrentAdd(context.Context, *TorrentAddParams) (*Torrent, error)
	TorrentDelete(context.Context, *InfoHashParam) (*emptypb.Empty, error)
	TorrentUpdate(context.Context, *TorrentUpdateParams) (*Torrent, error)
	mustEmbedUnimplementedTorrentsServer()
}

// UnimplementedTorrentsServer must be embedded to have forward compatible implementations.
type UnimplementedTorrentsServer struct {
}

func (UnimplementedTorrentsServer) GetTorrent(context.Context, *TorrentParams) (*Torrent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTorrent not implemented")
}
func (UnimplementedTorrentsServer) TorrentAdd(context.Context, *TorrentAddParams) (*Torrent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TorrentAdd not implemented")
}
func (UnimplementedTorrentsServer) TorrentDelete(context.Context, *InfoHashParam) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TorrentDelete not implemented")
}
func (UnimplementedTorrentsServer) TorrentUpdate(context.Context, *TorrentUpdateParams) (*Torrent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TorrentUpdate not implemented")
}
func (UnimplementedTorrentsServer) mustEmbedUnimplementedTorrentsServer() {}

// UnsafeTorrentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentsServer will
// result in compilation errors.
type UnsafeTorrentsServer interface {
	mustEmbedUnimplementedTorrentsServer()
}

func RegisterTorrentsServer(s grpc.ServiceRegistrar, srv TorrentsServer) {
	s.RegisterService(&Torrents_ServiceDesc, srv)
}

func _Torrents_GetTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorrentParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentsServer).GetTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mika.Torrents/GetTorrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentsServer).GetTorrent(ctx, req.(*TorrentParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Torrents_TorrentAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorrentAddParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentsServer).TorrentAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mika.Torrents/TorrentAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentsServer).TorrentAdd(ctx, req.(*TorrentAddParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Torrents_TorrentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoHashParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentsServer).TorrentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mika.Torrents/TorrentDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentsServer).TorrentDelete(ctx, req.(*InfoHashParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Torrents_TorrentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TorrentUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentsServer).TorrentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mika.Torrents/TorrentUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentsServer).TorrentUpdate(ctx, req.(*TorrentUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Torrents_ServiceDesc is the grpc.ServiceDesc for Torrents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Torrents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mika.Torrents",
	HandlerType: (*TorrentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTorrent",
			Handler:    _Torrents_GetTorrent_Handler,
		},
		{
			MethodName: "TorrentAdd",
			Handler:    _Torrents_TorrentAdd_Handler,
		},
		{
			MethodName: "TorrentDelete",
			Handler:    _Torrents_TorrentDelete_Handler,
		},
		{
			MethodName: "TorrentUpdate",
			Handler:    _Torrents_TorrentUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/torrents.proto",
}
